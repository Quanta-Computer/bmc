/****************************************************************
 **                                                            **
 **    (C) Copyright 2006-2009, American Megatrends Inc.       **
 **                                                            **
 **            All Rights Reserved.                            **
 **                                                            **
 **        5555 Oakbrook Pkwy Suite 200, Norcross,             **
 **                                                            **
 **        Georgia - 30093, USA. Phone-(770)-246-8600          **
 **                                                            **
 ****************************************************************/

JTables = {
    zigzag: new Uint8Array([
        0, 1, 5, 6, 14, 15, 27, 28,
        2, 4, 7, 13, 16, 26, 29, 42,
        3, 8, 12, 17, 25, 30, 41, 43,
        9, 11, 18, 24, 31, 40, 44, 53,
        10, 19, 23, 32, 39, 45, 52, 54,
        20, 22, 33, 38, 46, 51, 55, 60,
        21, 34, 37, 47, 50, 56, 59, 61,
        35, 36, 48, 49, 57, 58, 62, 63
    ]),

    dezigzag: new Uint8Array([
        0, 1, 8, 16, 9, 2, 3, 10,
        17, 24, 32, 25, 18, 11, 4, 5,
        12, 19, 26, 33, 40, 48, 41, 34,
        27, 20, 13, 6, 7, 14, 21, 28,
        35, 42, 49, 56, 57, 50, 43, 36,
        29, 22, 15, 23, 30, 37, 44, 51,
        58, 59, 52, 45, 38, 31, 39, 46,
        53, 60, 61, 54, 47, 55, 62, 63,
        // let corrupt input sample past end
        63, 63, 63, 63, 63, 63, 63, 63,
        63, 63, 63, 63, 63, 63, 63
    ]),

    std_luminance_qt: [],
    std_chrominance_qt: [],

    // Standard Huffman tables (cf. JPEG standard section K.3) */
    std_dc_luminance_nrcodes: new Uint8Array([
        0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0
    ]),

    std_dc_luminance_values: new Uint8Array([
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
    ]),

    std_dc_chrominance_nrcodes: new Uint8Array([
        0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
    ]),

    std_dc_chrominance_values: new Uint8Array([
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
    ]),

    std_ac_luminance_nrcodes: new Uint8Array([
        0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d
    ]),

    std_ac_luminance_values: new Uint8Array([
        0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
        0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
        0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
        0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
        0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
        0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
        0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
        0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
        0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
        0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
        0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
        0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
        0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
        0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
        0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
        0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
        0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
        0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
        0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
        0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
        0xf9, 0xfa
    ]),

    std_ac_chrominance_nrcodes: new Uint8Array([
        0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77
    ]),

    std_ac_chrominance_values: new Uint8Array([
        0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
        0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
        0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
        0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
        0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
        0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
        0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
        0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
        0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
        0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
        0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
        0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
        0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
        0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
        0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
        0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
        0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
        0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
        0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
        0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
        0xf9, 0xfa
    ]),

    DC_LUMINANCE_HUFFMANCODE: new Uint16Array([
        0x0000, 0, /* 0 */
        0x4000, 2, /* 1 */
        0x6000, 3, /* 2 */
        0x8000, 3, /* 3 */
        0xA000, 3, /* 4 */
        0xC000, 3, /* 5 */
        0xE000, 3, /* 6 */
        0xF000, 4, /* 7 */
        0xF800, 5, /* 8 */
        0xFC00, 6, /* 9 */
        0xFE00, 7, /* 10*/
        0xFF00, 8, /* 11 */
        0xFFFF, 9, /* 12 */
    ]),

    DC_LUMINANCE_HUFFMANCODE_LOW_BYTE: new Uint16Array([
                                                        0x00, 0, /* 0 */
                                                        0x00, 2, /* 1 */
                                                        0x00, 3, /* 2 */
                                                        0x00, 3, /* 3 */
                                                        0x00, 3, /* 4 */
                                                        0x00, 3, /* 5 */
                                                        0x00, 3, /* 6 */
                                                        0x00, 4, /* 7 */
                                                        0x00, 5, /* 8 */
                                                        0x00, 6, /* 9 */
                                                        0x00, 7, /* 10*/
                                                        0x00, 8, /* 11 */
                                                        0xFF, 9, /* 12 */
                                                        ]),

    DC_CHROMINANCE_HUFFMANCODE: new Uint16Array([
        /* 0 */
        0x0000, 0,
        /* 1 */
        0x4000, 2,
        /* 2 */
        0x8000, 2,
        /* 3 */
        0xC000, 2,
        /* 4 */
        0xE000, 3,
        /* 5 */
        0xF000, 4,
        /* 6 */
        0xF800, 5,
        /* 7 */
        0xFC00, 6,
        /* 8 */
        0xFE00, 7,
        /* 9 */
        0xFF00, 8,
        /* 10 */
        0xFF80, 9,
        /* 11 */
        0xFFC0, 10,
        0xFFFF, 11, /* 12 */
    ]),
    DC_CHROMINANCE_HUFFMANCODE_LOW_BYTE: new Uint16Array([
                                                 /* 0 */
                                                 0x00, 0,
                                                 /* 1 */
                                                 0x00, 2,
                                                 /* 2 */
                                                 0x00, 2,
                                                 /* 3 */
                                                 0x00, 2,
                                                 /* 4 */
                                                 0x00, 3,
                                                 /* 5 */
                                                 0x00, 4,
                                                 /* 6 */
                                                 0x00, 5,
                                                 /* 7 */
                                                 0x00, 6,
                                                 /* 8 */
                                                 0x00, 7,
                                                 /* 9 */
                                                 0x00, 8,
                                                 /* 10 */
                                                 0x80, 9,
                                                 /* 11 */
                                                 0xC0, 10,
                                                 0xFF, 11, /* 12 */
                                                 ]),

    AC_LUMINANCE_HUFFMANCODE: new Uint16Array([
        /* 0 */
        0x0000, 0,
        /* 1 */
        0x4000, 2,
        /* 2 */
        0x8000, 2,
        /* 3 */
        0xA000, 3,
        /* 4 */
        0xB000, 4,
        /* 5 */
        0xC000, 4,
        /* 6 */
        0xD000, 4,
        /* 7 */
        0xD800, 5,
        /* 8 */
        0xE000, 5,
        /* 9 */
        0xE800, 5,
        /* 10 */
        0xEC00, 6,
        /* 11 */
        0xF000, 6,
        /* 12 */
        0xF200, 7,
        /* 13 */
        0xF400, 7,
        /* 14 */
        0xF600, 7,
        /* 15 */
        0xF800, 7,
        /* 16 */
        0xF900, 8,
        /* 17 */
        0xFA00, 8,
        /* 18 */
        0xFB00, 8,
        /* 19 */
        0xFB80, 9,
        /* 20 */
        0xFC00, 9,
        /* 21 */
        0xFC80, 9,
        /* 22 */
        0xFD00, 9,
        /* 23 */
        0xFD80, 9,
        /* 24 */
        0xFDC0, 10,
        /* 25 */
        0xFE00, 10,
        /* 26 */
        0xFE40, 10,
        /* 27 */
        0xFE80, 10,
        /* 28 */
        0xFEC0, 10,
        /* 29 */
        0xFEE0, 11,
        /* 30 */
        0xFF00, 11,
        /* 31 */
        0xFF20, 11,
        /* 32 */
        0xFF40, 11,
        /* 33 */
        0xFF50, 12,
        /* 34 */
        0xFF60, 12,
        /* 35 */
        0xFF70, 12,
        /* 36 */
        0xFF80, 12,
        /* 37 */
        0xFF82, 15,
        /* 38 */
        0xFFFF, 16,
    ]),

    AC_LUMINANCE_HUFFMANCODE_LOW_BYTE: new Uint16Array([
                                               /* 0 */
                                               0x00, 0,
                                               /* 1 */
                                               0x00, 2,
                                               /* 2 */
                                               0x00, 2,
                                               /* 3 */
                                               0x00, 3,
                                               /* 4 */
                                               0x00, 4,
                                               /* 5 */
                                               0x00, 4,
                                               /* 6 */
                                               0x00, 4,
                                               /* 7 */
                                               0x00, 5,
                                               /* 8 */
                                               0x00, 5,
                                               /* 9 */
                                               0x00, 5,
                                               /* 10 */
                                               0x00, 6,
                                               /* 11 */
                                               0x00, 6,
                                               /* 12 */
                                               0x00, 7,
                                               /* 13 */
                                               0x00, 7,
                                               /* 14 */
                                               0x00, 7,
                                               /* 15 */
                                               0x00, 7,
                                               /* 16 */
                                               0x00, 8,
                                               /* 17 */
                                               0x00, 8,
                                               /* 18 */
                                               0x00, 8,
                                               /* 19 */
                                               0x80, 9,
                                               /* 20 */
                                               0x00, 9,
                                               /* 21 */
                                               0x80, 9,
                                               /* 22 */
                                               0x00, 9,
                                               /* 23 */
                                               0x80, 9,
                                               /* 24 */
                                               0xC0, 10,
                                               /* 25 */
                                               0x00, 10,
                                               /* 26 */
                                               0x40, 10,
                                               /* 27 */
                                               0x80, 10,
                                               /* 28 */
                                               0xC0, 10,
                                               /* 29 */
                                               0xE0, 11,
                                               /* 30 */
                                               0x00, 11,
                                               /* 31 */
                                               0x20, 11,
                                               /* 32 */
                                               0x40, 11,
                                               /* 33 */
                                               0x50, 12,
                                               /* 34 */
                                               0x60, 12,
                                               /* 35 */
                                               0x70, 12,
                                               /* 36 */
                                               0x80, 12,
                                               /* 37 */
                                               0x82, 15,
                                               /* 38 */
                                               0xFF, 16,
                                               ]),

    AC_CHROMINANCE_HUFFMANCODE: new Uint16Array([
        /* 0 */
        0x0000, 0,
        /* 1 */
        0x4000, 2,
        /* 2 */
        0x8000, 2,
        /* 3 */
        0xA000, 3,
        /* 4 */
        0xB000, 4,
        /* 5 */
        0xC000, 4,
        /* 6 */
        0xC800, 5,
        /* 7 */
        0xD000, 5,
        /* 8 */
        0xD800, 5,
        /* 9 */
        0xE000, 5,
        /* 10 */
        0xE400, 6,
        /* 11 */
        0xE800, 6,
        /* 12 */
        0xEC00, 6,
        /* 13 */
        0xF000, 6,
        /* 14 */
        0xF200, 7,
        /* 15 */
        0xF400, 7,
        /* 16 */
        0xF600, 7,
        /* 17 */
        0xF700, 8,
        /* 18 */
        0xF800, 8,
        /* 19 */
        0xF900, 8,
        /* 20 */
        0xFA00, 8,
        /* 21 */
        0xFA80, 9,
        /* 22 */
        0xFB00, 9,
        /* 23 */
        0xFB80, 9,
        /* 24 */
        0xFC00, 9,
        /* 25 */
        0xFC80, 9,
        /* 26 */
        0xFD00, 9,
        /* 27 */
        0xFD80, 9,
        /* 28 */
        0xFDC0, 10,
        /* 29 */
        0xFE00, 10,
        /* 30 */
        0xFE40, 10,
        /* 31 */
        0xFE80, 10,
        /* 32 */
        0xFEC0, 10,
        /* 33 */
        0xFEE0, 11,
        /* 34 */
        0xFF00, 11,
        /* 35 */
        0xFF20, 11,
        /* 36 */
        0xFF40, 11,
        /* 37 */
        0xFF50, 12,
        /* 38 */
        0xFF60, 12,
        /* 39 */
        0xFF70, 12,
        /* 40 */
        0xFF80, 12,
        /* 41 */
        0xFF84, 14,
        /* 42 */
        0xFF86, 15,
        /* 43 */
        0xFF88, 15,
        /* 44 */
        0xFFFF, 16,
    ]),

    AC_CHROMINANCE_HUFFMANCODE_LOW_BYTE: new Uint16Array([
                                                 /* 0 */
                                                 0x00, 0,
                                                 /* 1 */
                                                 0x00, 2,
                                                 /* 2 */
                                                 0x00, 2,
                                                 /* 3 */
                                                 0x00, 3,
                                                 /* 4 */
                                                 0x00, 4,
                                                 /* 5 */
                                                 0x00, 4,
                                                 /* 6 */
                                                 0x00, 5,
                                                 /* 7 */
                                                 0x00, 5,
                                                 /* 8 */
                                                 0x00, 5,
                                                 /* 9 */
                                                 0x00, 5,
                                                 /* 10 */
                                                 0x00, 6,
                                                 /* 11 */
                                                 0x00, 6,
                                                 /* 12 */
                                                 0x00, 6,
                                                 /* 13 */
                                                 0x00, 6,
                                                 /* 14 */
                                                 0x00, 7,
                                                 /* 15 */
                                                 0x00, 7,
                                                 /* 16 */
                                                 0x00, 7,
                                                 /* 17 */
                                                 0x00, 8,
                                                 /* 18 */
                                                 0x00, 8,
                                                 /* 19 */
                                                 0x00, 8,
                                                 /* 20 */
                                                 0x00, 8,
                                                 /* 21 */
                                                 0x80, 9,
                                                 /* 22 */
                                                 0x00, 9,
                                                 /* 23 */
                                                 0x80, 9,
                                                 /* 24 */
                                                 0x00, 9,
                                                 /* 25 */
                                                 0x80, 9,
                                                 /* 26 */
                                                 0x00, 9,
                                                 /* 27 */
                                                 0x80, 9,
                                                 /* 28 */
                                                 0xC0, 10,
                                                 /* 29 */
                                                 0x00, 10,
                                                 /* 30 */
                                                 0x40, 10,
                                                 /* 31 */
                                                 0x80, 10,
                                                 /* 32 */
                                                 0xC0, 10,
                                                 /* 33 */
                                                 0xE0, 11,
                                                 /* 34 */
                                                 0x00, 11,
                                                 /* 35 */
                                                 0x20, 11,
                                                 /* 36 */
                                                 0x40, 11,
                                                 /* 37 */
                                                 0x50, 12,
                                                 /* 38 */
                                                 0x60, 12,
                                                 /* 39 */
                                                 0x70, 12,
                                                 /* 40 */
                                                 0x80, 12,
                                                 /* 41 */
                                                 0x84, 14,
                                                 /* 42 */
                                                 0x86, 15,
                                                 /* 43 */
                                                 0x88, 15,
                                                 /* 44 */
                                                 0xFF, 16,
                                             ]),

    Tbl_100Y: new Uint8Array([
        2, 1, 1, 2, 3, 5, 6, 7,
        1, 1, 1, 2, 3, 7, 7, 6,
        1, 1, 2, 3, 5, 7, 8, 7,
        1, 2, 2, 3, 6, 10, 10, 7,
        2, 2, 4, 7, 8, 13, 12, 9,
        3, 4, 6, 8, 10, 13, 14, 11,
        6, 8, 9, 10, 12, 15, 15, 12,
        9, 11, 11, 12, 14, 12, 12, 12
    ]),

    Tbl_100UV: new Uint8Array([
        3, 3, 4, 8, 18, 18, 18, 18,
        3, 3, 4, 12, 18, 18, 18, 18,
        4, 4, 10, 18, 18, 18, 18, 18,
        8, 12, 18, 18, 18, 18, 18, 18,
        18, 18, 18, 18, 18, 18, 18, 18,
        18, 18, 18, 18, 18, 18, 18, 18,
        18, 18, 18, 18, 18, 18, 18, 18,
        18, 18, 18, 18, 18, 18, 18, 18
    ]),

    Tbl_086Y: new Uint8Array([
        3, 2, 1, 3, 4, 7, 9, 11,
        2, 2, 2, 3, 4, 10, 11, 10,
        2, 2, 3, 4, 7, 10, 12, 10,
        2, 3, 4, 5, 9, 16, 15, 11,
        3, 4, 6, 10, 12, 20, 19, 14,
        4, 6, 10, 12, 15, 19, 21, 17,
        9, 12, 14, 16, 19, 22, 22, 18,
        13, 17, 17, 18, 21, 18, 19, 18
    ]),

    Tbl_086UV: new Uint8Array([
        4, 5, 6, 13, 27, 27, 27, 27,
        5, 5, 7, 18, 27, 27, 27, 27,
        6, 7, 15, 27, 27, 27, 27, 27,
        13, 18, 27, 27, 27, 27, 27, 27,
        27, 27, 27, 27, 27, 27, 27, 27,
        27, 27, 27, 27, 27, 27, 27, 27,
        27, 27, 27, 27, 27, 27, 27, 27,
        27, 27, 27, 27, 27, 27, 27, 27
    ]),

    Tbl_071Y: new Uint8Array([
        6, 4, 3, 6, 9, 15, 19, 22,
        4, 4, 5, 7, 9, 21, 22, 20,
        5, 4, 6, 9, 15, 21, 25, 21,
        5, 6, 8, 10, 19, 32, 30, 23,
        6, 8, 13, 21, 25, 40, 38, 28,
        9, 13, 20, 24, 30, 39, 42, 34,
        18, 24, 29, 32, 38, 45, 45, 37,
        27, 34, 35, 36, 42, 37, 38, 37
    ]),

    Tbl_071UV: new Uint8Array([
        9, 10, 13, 26, 55, 55, 55, 55,
        10, 11, 14, 37, 55, 55, 55, 55,
        13, 14, 31, 55, 55, 55, 55, 55,
        26, 37, 55, 55, 55, 55, 55, 55,
        55, 55, 55, 55, 55, 55, 55, 55,
        55, 55, 55, 55, 55, 55, 55, 55,
        55, 55, 55, 55, 55, 55, 55, 55,
        55, 55, 55, 55, 55, 55, 55, 55
    ]),

    Tbl_057Y: new Uint8Array([
        9, 6, 5, 9, 13, 22, 28, 34,
        6, 6, 7, 10, 14, 32, 33, 30,
        7, 7, 9, 13, 22, 32, 38, 31,
        7, 9, 12, 16, 28, 48, 45, 34,
        10, 12, 20, 31, 38, 61, 57, 43,
        13, 19, 30, 36, 45, 58, 63, 51,
        27, 36, 43, 48, 57, 68, 67, 56,
        40, 51, 53, 55, 63, 56, 57, 55
    ]),

    Tbl_057UV: new Uint8Array([
        13, 14, 19, 38, 80, 80, 80, 80,
        14, 17, 21, 53, 80, 80, 80, 80,
        19, 21, 45, 80, 80, 80, 80, 80,
        38, 53, 80, 80, 80, 80, 80, 80,
        80, 80, 80, 80, 80, 80, 80, 80,
        80, 80, 80, 80, 80, 80, 80, 80,
        80, 80, 80, 80, 80, 80, 80, 80,
        80, 80, 80, 80, 80, 80, 80, 80
    ]),

    Tbl_043Y: new Uint8Array([
        11, 7, 7, 11, 17, 28, 36, 43,
        8, 8, 10, 13, 18, 41, 43, 39,
        10, 9, 11, 17, 28, 40, 49, 40,
        10, 12, 15, 20, 36, 62, 57, 44,
        12, 15, 26, 40, 48, 78, 74, 55,
        17, 25, 39, 46, 58, 74, 81, 66,
        35, 46, 56, 62, 74, 86, 86, 72,
        51, 66, 68, 70, 80, 71, 74, 71
    ]),

    Tbl_043UV: new Uint8Array([
        18, 19, 26, 51, 108, 108, 108, 108,
        19, 22, 28, 72, 108, 108, 108, 108,
        26, 28, 61, 108, 108, 108, 108, 108,
        51, 72, 108, 108, 108, 108, 108, 108,
        108, 108, 108, 108, 108, 108, 108, 108,
        108, 108, 108, 108, 108, 108, 108, 108,
        108, 108, 108, 108, 108, 108, 108, 108,
        108, 108, 108, 108, 108, 108, 108, 108
    ]),

    Tbl_029Y: new Uint8Array([
        14, 9, 9, 14, 21, 36, 46, 55,
        10, 10, 12, 17, 23, 52, 54, 49,
        12, 11, 14, 21, 36, 51, 62, 50,
        12, 15, 19, 26, 46, 78, 72, 56,
        16, 19, 33, 50, 61, 98, 93, 69,
        21, 31, 49, 58, 73, 94, 102, 83,
        44, 58, 70, 78, 93, 109, 108, 91,
        65, 83, 86, 88, 101, 90, 93, 89
    ]),

    Tbl_029UV: new Uint8Array([
        22, 24, 32, 63, 133, 133, 133, 133,
        24, 28, 34, 88, 133, 133, 133, 133,
        32, 34, 75, 133, 133, 133, 133, 133,
        63, 88, 133, 133, 133, 133, 133, 133,
        133, 133, 133, 133, 133, 133, 133, 133,
        133, 133, 133, 133, 133, 133, 133, 133,
        133, 133, 133, 133, 133, 133, 133, 133,
        133, 133, 133, 133, 133, 133, 133, 133
    ]),

    Tbl_014Y: new Uint8Array([
        17, 12, 10, 17, 26, 43, 55, 66,
        13, 13, 15, 20, 28, 63, 65, 60,
        15, 14, 17, 26, 43, 62, 75, 61,
        15, 18, 24, 31, 55, 95, 87, 67,
        19, 24, 40, 61, 74, 119, 112, 84,
        26, 38, 60, 70, 88, 113, 123, 100,
        53, 70, 85, 95, 112, 132, 131, 110,
        78, 100, 103, 107, 122, 109, 112, 108
    ]),

    Tbl_014UV: new Uint8Array([
        27, 29, 39, 76, 160, 160, 160, 160,
        29, 34, 42, 107, 160, 160, 160, 160,
        39, 42, 91, 160, 160, 160, 160, 160,
        76, 107, 160, 160, 160, 160, 160, 160,
        160, 160, 160, 160, 160, 160, 160, 160,
        160, 160, 160, 160, 160, 160, 160, 160,
        160, 160, 160, 160, 160, 160, 160, 160,
        160, 160, 160, 160, 160, 160, 160, 160
    ]),

    Tbl_000Y: new Uint8Array([
        20, 13, 12, 20, 30, 50, 63, 76,
        15, 15, 17, 23, 32, 72, 75, 68,
        17, 16, 20, 30, 50, 71, 86, 70,
        17, 21, 27, 36, 63, 108, 100, 77,
        22, 27, 46, 70, 85, 136, 128, 96,
        30, 43, 68, 80, 101, 130, 141, 115,
        61, 80, 97, 108, 128, 151, 150, 126,
        90, 115, 118, 122, 140, 125, 128, 123
    ]),

    Tbl_000UV: new Uint8Array([
        31, 33, 45, 88, 185, 185, 185, 185,
        33, 39, 48, 123, 185, 185, 185, 185,
        45, 48, 105, 185, 185, 185, 185, 185,
        88, 123, 185, 185, 185, 185, 185, 185,
        185, 185, 185, 185, 185, 185, 185, 185,
        185, 185, 185, 185, 185, 185, 185, 185,
        185, 185, 185, 185, 185, 185, 185, 185,
        185, 185, 185, 185, 185, 185, 185, 185
    ])
};

//importScripts('../../DataStream.js/DataStream.js', 'jsbn.js', 'JTables.js');

var Decoder = function() {

    dp2 = da = 0;

    this.m_VQ = new COLOR_CACHE();

    this.position = 0;

    this.decodeRC4State = false;

    this.m_YDC_nr = 0;
    this.m_CbDC_nr = 1;
    this.m_CrDC_nr = 1;
    this.m_YAC_nr = 0;
    this.m_CbAC_nr = 1;
    this.m_CrAC_nr = 1;
    this.d_k = 0;

    this.neg_pow2 = new Uint16Array(this.POWEROFTOW);

    var i = this.POWEROFTOW -1;
    do{
    	this.neg_pow2[i] = parseInt((1 - (1<<i)), 10);//Math.pow(2,x) = 1<<x
    }while(i--);

    this.HTDC = [];
    this.HTAC = [];

    this.HTDC[0] = new HuffmanTable();
    this.HTDC[1] = new HuffmanTable();
    this.HTDC[2] = new HuffmanTable();
    this.HTDC[3] = new HuffmanTable();

    this.HTAC[0] = new HuffmanTable();
    this.HTAC[1] = new HuffmanTable();
    this.HTAC[2] = new HuffmanTable();
    this.HTAC[3] = new HuffmanTable();

    this.decodeKeys = "fedcba9876543210".split();

    this.s = new RC4State();

    this.m_RecvBuffer = new Int8Array(0);

    this.yheader = new CompressHeader();
    this.uvheader = new CompressHeader();

    this.w1 = 0;
    this.w2 = 0;

    this.bp = 0;
    this.wordval = 0;

    this.m_QT = [];
    this.m_QT[0] = [];
    this.m_QT[1] = [];
    this.m_QT[2] = [];
    this.m_QT[3] = [];


    this.previousYUVData = new Int32Array(4 * 1600 * 1200);

    this.m_Y = new Array(-19,-17,-16,-15,-14,-13,-12,-10,-9,-8,-7,-6,-5,-3,-2,-1,0,1,2,3,5,6,7,8,9,10,12,13,14,15,16,17,19,20,21,22,23,24,26,27,28,29,30,31,33,34,35,36,37,38,40,41,42,43,44,45,47,48,49,50,51,52,54,55,56,57,58,59,61,62,63,64,65,66,68,69,70,71,72,73,74,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,97,98,99,100,101,102,104,105,106,107,108,109,111,112,113,114,115,116,118,119,120,121,122,123,125,126,127,128,129,130,132,133,134,135,136,137,139,140,141,142,143,144,146,147,148,149,150,151,152,154,155,156,157,158,159,161,162,163,164,165,166,168,169,170,171,172,173,175,176,177,178,179,180,182,183,184,185,186,187,189,190,191,192,193,194,196,197,198,199,200,201,203,204,205,206,207,208,210,211,212,213,214,215,217,218,219,220,221,222,223,225,226,227,228,229,230,232,233,234,235,236,237,239,240,241,242,243,244,246,247,248,249,250,251,253,254,255,256,257,258,260,261,262,263,264,265,267,268,269,270,271,272,274,275,276,277,278);
    this.m_CrToR = new Array(-204,-203,-201,-200,-198,-197,-195,-193,-192,-190,-189,-187,-185,-184,-182,-181,-179,-177,-176,-174,-173,-171,-169,-168,-166,-165,-163,-161,-160,-158,-157,-155,-153,-152,-150,-149,-147,-145,-144,-142,-141,-139,-137,-136,-134,-133,-131,-129,-128,-126,-125,-123,-121,-120,-118,-117,-115,-113,-112,-110,-109,-107,-105,-104,-102,-101,-99,-97,-96,-94,-93,-91,-89,-88,-86,-85,-83,-81,-80,-78,-77,-75,-73,-72,-70,-69,-67,-66,-64,-62,-61,-59,-58,-56,-54,-53,-51,-50,-48,-46,-45,-43,-42,-40,-38,-37,-35,-34,-32,-30,-29,-27,-26,-24,-22,-21,-19,-18,-16,-14,-13,-11,-10,-8,-6,-5,-3,-2,0,2,3,5,6,8,10,11,13,14,16,18,19,21,22,24,26,27,29,30,32,34,35,37,38,40,42,43,45,46,48,50,51,53,54,56,58,59,61,62,64,66,67,69,70,72,73,75,77,78,80,81,83,85,86,88,89,91,93,94,96,97,99,101,102,104,105,107,109,110,112,113,115,117,118,120,121,123,125,126,128,129,131,133,134,136,137,139,141,142,144,145,147,149,150,152,153,155,157,158,160,161,163,165,166,168,169,171,173,174,176,177,179,181,182,184,185,187,189,190,192,193,195,197,198,200,201,203);
    this.m_CbToB = new Array(-258,-256,-254,-252,-250,-248,-246,-244,-242,-240,-238,-236,-234,-232,-230,-228,-226,-224,-222,-220,-218,-216,-214,-212,-210,-208,-206,-204,-202,-200,-198,-196,-193,-191,-189,-187,-185,-183,-181,-179,-177,-175,-173,-171,-169,-167,-165,-163,-161,-159,-157,-155,-153,-151,-149,-147,-145,-143,-141,-139,-137,-135,-133,-131,-129,-127,-125,-123,-121,-119,-117,-115,-113,-111,-109,-107,-105,-103,-101,-99,-97,-95,-93,-91,-89,-87,-85,-83,-81,-79,-77,-75,-73,-71,-69,-67,-64,-62,-60,-58,-56,-54,-52,-50,-48,-46,-44,-42,-40,-38,-36,-34,-32,-30,-28,-26,-24,-22,-20,-18,-16,-14,-12,-10,-8,-6,-4,-2,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256);
    this.m_CrToG = new Array(50,50,49,49,48,48,48,47,47,46,46,46,45,45,45,44,44,43,43,43,42,42,41,41,41,40,40,39,39,39,38,38,38,37,37,36,36,36,35,35,34,34,34,33,33,32,32,32,31,31,30,30,30,29,29,29,28,28,27,27,27,26,26,25,25,25,24,24,23,23,23,22,22,21,21,21,20,20,20,19,19,18,18,18,17,17,16,16,16,15,15,14,14,14,13,13,13,12,12,11,11,11,10,10,9,9,9,8,8,7,7,7,6,6,5,5,5,4,4,4,3,3,2,2,2,1,1,0,0,0,-1,-1,-2,-2,-2,-3,-3,-4,-4,-4,-5,-5,-5,-6,-6,-7,-7,-7,-8,-8,-9,-9,-9,-10,-10,-11,-11,-11,-12,-12,-12,-13,-13,-14,-14,-14,-15,-15,-16,-16,-16,-17,-17,-18,-18,-18,-19,-19,-20,-20,-20,-21,-21,-21,-22,-22,-23,-23,-23,-24,-24,-25,-25,-25,-26,-26,-27,-27,-27,-28,-28,-29,-29,-29,-30,-30,-30,-31,-31,-32,-32,-32,-33,-33,-34,-34,-34,-35,-35,-36,-36,-36,-37,-37,-37,-38,-38,-39,-39,-39,-40,-40,-41,-41,-41,-42,-42,-43,-43,-43,-44,-44,-45,-45,-45,-46,-46,-46,-47,-47,-48,-48,-48,-49,-49,-50);
    this.m_CbToG = new Array(50,50,49,49,48,48,48,47,47,46,46,46,45,45,45,44,44,43,43,43,42,42,41,41,41,40,40,39,39,39,38,38,38,37,37,36,36,36,35,35,34,34,34,33,33,32,32,32,31,31,30,30,30,29,29,29,28,28,27,27,27,26,26,25,25,25,24,24,23,23,23,22,22,21,21,21,20,20,20,19,19,18,18,18,17,17,16,16,16,15,15,14,14,14,13,13,13,12,12,11,11,11,10,10,9,9,9,8,8,7,7,7,6,6,5,5,5,4,4,4,3,3,2,2,2,1,1,0,0,0,-1,-1,-2,-2,-2,-3,-3,-4,-4,-4,-5,-5,-5,-6,-6,-7,-7,-7,-8,-8,-9,-9,-9,-10,-10,-11,-11,-11,-12,-12,-12,-13,-13,-14,-14,-14,-15,-15,-16,-16,-16,-17,-17,-18,-18,-18,-19,-19,-20,-20,-20,-21,-21,-21,-22,-22,-23,-23,-23,-24,-24,-25,-25,-25,-26,-26,-27,-27,-27,-28,-28,-29,-29,-29,-30,-30,-30,-31,-31,-32,-32,-32,-33,-33,-34,-34,-34,-35,-35,-36,-36,-36,-37,-37,-37,-38,-38,-39,-39,-39,-40,-40,-41,-41,-41,-42,-42,-43,-43,-43,-44,-44,-45,-45,-45,-46,-46,-46,-47,-47,-48,-48,-48,-49,-49,-50);

    this.m_DCY = new Int16Array(1);
    this.DCCb = new Int16Array(1);
    this.DCCr = new Int16Array(1);

    this.YUVTile = new Uint8Array(768);
    this.DCT_coeff = new Int16Array(384);
    this.Y = new Uint8Array(64);
    this.Cb = new Uint8Array(64);
    this.Cr = new Uint8Array(64);

    this.SCALEFACTOR = 16;
    this.SCALEFACTORUV = 16;
    this.ADVANCESCALEFACTOR = 16;
    this.ADVANCESCALEFACTORUV = 16;

    this.selector = 0;
    this.advance_selector = 0;
    this.Mapping = 0;
    this.mode420 = -1;

    this.txb = 0;
    this.tyb = 0;
    this.oldxb = 0;
    this.oldyb = 0;
    this.pixels = 0;
    this.readbuf = this.m_codebuf = this.m_newbuf = 0;
    this.codesize = 0;
    this.m_newbits = 0;

    this.m_VQ.Index[0] = 0;
    this.m_VQ.Index[1] = 1;
    this.m_VQ.Index[2] = 2;
    this.m_VQ.Index[3] = 3;
    this.m_VQ.Color[0] = 0x008080;
    this.m_VQ.Color[1] = 0xFF8080;
    this.m_VQ.Color[2] = 0x808080;
    this.m_VQ.Color[3] = 0xC08080;

    this.width = this.height = this.tmp_h16 = this.tmp_w16 = this.realWidth = this.realHeight = 0;
    this.moduldDivisor = 0;
    this.firstframe = 1;

    this.buf;
    this.bp;
//    this.byte_pos;
    this.YH, this.YV, this.CbH, this.CbV, this.CrH, this.CrV;

    this.w1, this.w2, this.wordval;

    this.workspace = new Uint32Array(64);
    this.lookBitResult;
    this.min_code, this.maj_code, this.huff_values;

    this.rangeLimitTable = new Array





































































,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127);
//    this.rangeLimitTableShort = this.rangeLimitTable;//new Uint8Array(this.RANGE_LIMIT_TABLE_SIZE);
    //IMPORTANT
    //color table has been calculated and used initilized in static way
    // This will avoid delay.
    //this.initColorTable();
    this.initHuffmanTable();
}

Decoder.prototype = {

    MAX_X_RESOLUTION: 1500,
    MAX_Y_RESOLUTION: 1500,



    POWEROFTOW: 17,

    RANGE_LIMIT_TABLE_SIZE: (5 * 256) + 128,


    BLOCK_HEADER_MASK: 0x0f,
    VQ_HEADER_MASK: 0x01,
    VQ_NO_UPDATE_HEADER: 0x00,
    VQ_NO_UPDATE_LENGTH: 0x03,
    VQ_UPDATE_LENGTH: 0x1B,
    VQ_INDEX_MASK: 0x03,
    VQ_COLOR_MASK: 0xFFFFFF,

    JPEG_NO_SKIP_CODE: 0x00,
    JPEG_NO_SKIP_PASS2_CODE: 0x02,
    JPEG_SKIP_PASS2_CODE: 0x0a,
    LOW_JPEG_NO_SKIP_CODE: 0x04,
    LOW_JPEG_SKIP_CODE: 0x0c,
    JPEG_SKIP_CODE: 0x08,
    FRAME_END_CODE: 0x09,
    VQ_NO_SKIP_1_COLOR_CODE: 0x05,
    VQ_NO_SKIP_2_COLOR_CODE: 0x06,
    VQ_NO_SKIP_4_COLOR_CODE: 0x07,
    VQ_SKIP_1_COLOR_CODE: 0x0d,
    VQ_SKIP_2_COLOR_CODE: 0x0e,
    VQ_SKIP_4_COLOR_CODE: 0x0f,

    BLOCK_AST2100_START_LENGTH: 0x04,
    BLOCK_AST2100_SKIP_LENGTH: 20,

    //inverseDCR function
    FIX_1_082392200: 277,
    FIX_1_414213562: 362,
    FIX_1_847759065: 473,
    FIX_2_613125930: 669,

    DCTSIZE: 8,
    DCTSIZE_0: 0,//8 * 0,
    DCTSIZE_1: 8,//8 * 1,
    DCTSIZE_2: 16,//8 * 2,
    DCTSIZE_3: 24,//8 * 3,
    DCTSIZE_4: 32,//8 * 4,
    DCTSIZE_5: 40,//8 * 5,
    DCTSIZE_6: 48,//8 * 6,
    DCTSIZE_7: 56,//8 * 7,

    setImageBuffer: function(imageBuffer) {
        this.imageBuffer = imageBuffer;
        this.m_decodeBuf = imageBuffer.data;
    },


    lookKbits: function(k) {
        //return this.longLeftShift(this.getLong(this.currentData), 32-k);
        //return this.getLongCurrent().shiftRight(32 - k).intValue();
        return (this.currentData & 0xffffffff) >>> (32-k);
    },

    skipKbits: function(k) {
		var skipMask = (0xffffffff >>> k);
		var m_newbits = this.m_newbits;
		var currentData = this.currentData;
		var nextData = this.nextData;
		var _index = this._index;		

		if (m_newbits - k <= 0) {

			var m_RecvBuffer = this.m_RecvBuffer;
			if (SOCIVTPPktHdr.VIRTADD + this._index > m_RecvBuffer.length - 1) {
				this._index = m_RecvBuffer.length - 1 - SOCIVTPPktHdr.VIRTADD;
			}

			var cd = currentData & 0xffffffff,//this.getLongCurrent(),
				nd = nextData	& 0xffffffff,//this.getLongNext(),
				indexData = ((m_RecvBuffer[SOCIVTPPktHdr.VIRTADD + _index])  & 0xffffffff);//this.getLongIndexed();

			_index++;
			// console.log("this._index " + this._index);
			var fh = (cd & skipMask) << k, 
				l2 = indexData >>> m_newbits,
				tmpND = nd | l2,
				sh = tmpND >>> (32 - k);
			
			cd = fh | sh;
			var mask = 0xffffffff >>> (k - m_newbits);
			nd = (indexData & mask) << (k - m_newbits);
			
			currentData = cd;
			nextData = nd;
			
			m_newbits = 32 + m_newbits - k;
		} else {
			var cd = currentData & 0xffffffff,//this.getLongCurrent(),
				nd = nextData	& 0xffffffff;//this.getLongNext();


			var fh = (cd & skipMask) << k,
				sh = nd >>> (32 - k); //intv(this.longRightShift(this.getLong(this.nextData), (32-k)));

			cd = fh | sh;
			nd = (nd & skipMask) << k;

			//this.currentData = this.longLeftShift(this.currentData, k) | sh;
			//this.nextData = this.longLeftShift(this.nextData, k);
			currentData = cd;
			nextData = nd;
			m_newbits -= k;
		}

		this.m_newbits = m_newbits;
		this.currentData = currentData;
		this.nextData = nextData;
		this._index = _index;
	},

    getKbits: function(k) {
        this.signed_wordvalue = this.lookKbits(k);
        if ((1 << (k - 1) & this.signed_wordvalue) == 0) {
            this.signed_wordvalue += this.neg_pow2[k];
        }
        this.skipKbits(k);
        return this.signed_wordvalue;
    },


  setQuantizationTable: function(basic_table, scale_factor, newtable) {
    var i, temp;

    var sixteen_by_scale_factor = 16 / scale_factor;
    i = 63;
    do{
    	temp = basic_table[i] * sixteen_by_scale_factor;

    	if (temp <= 0)
    		temp = 1;
    	else if (temp > 255)
    		temp = 255;

    	newtable[JTables.zigzag[i]] = temp;
    }while(i--);

    return newtable;
  },

    loadLuminanceQuantizationTable: function(quant_table) {
        var scalefactor = [1.0,
            1.387039845,
            1.306562965,
            1.175875602,
            1.0,
            0.785694958,
            0.541196100,
            0.275899379
        ],
            j, row, col, tempQT = new Uint8Array(64); //(64);
    var scalefactor_mul = [65536.0,
                   90901.04328192,
                   85626.91047424,
                   77062.183452672,
                   65536.0,
                   51491.304767488,
                   35467.8276096,
                   18081.341702144
                  ];


        switch (this.selector) {
            case 0:
                JTables.std_luminance_qt = JTables.Tbl_000Y;
                break;
            case 1:
                JTables.std_luminance_qt = JTables.Tbl_014Y;
                break;
            case 2:
                JTables.std_luminance_qt = JTables.Tbl_029Y;
                break;
            case 3:
                JTables.std_luminance_qt = JTables.Tbl_043Y;
                break;
            case 4:
                JTables.std_luminance_qt = JTables.Tbl_057Y;
                break;
            case 5:
                JTables.std_luminance_qt = JTables.Tbl_071Y;
                break;
            case 6:
                JTables.std_luminance_qt = JTables.Tbl_086Y;
                break;
            case 7:
                JTables.std_luminance_qt = JTables.Tbl_100Y;
                break;
        }
      
        tempQT = this.setQuantizationTable(JTables.std_luminance_qt, this.SCALEFACTOR, tempQT);


        j = 0;

        for (row = 0; row <= 7; row++) {
        var scale_factor_value = scalefactor_mul[row];
            for (col = 0; col <= 7; col++) {
                quant_table[j] = (((tempQT[JTables.zigzag[j++]] & 0x00FF) * scale_factor_value * scalefactor[col]) | 0);
            }
        }

//        this.byte_pos += 64;
        delete tempQT;
        tempQT = null;

        return quant_table;
    },

    loadChrominanceQuantizationTable: function(quant_table) {
        var scalefactor = [
            1.0,
            1.387039845,
            1.306562965,
            1.175875602,
            1.0,
            0.785694958,
            0.541196100,
            0.275899379
        ],
            j, row, col, tempQT = new Uint8Array(64),
            temp;
    
    var scalefactor_mul = [65536.0,
                   90901.04328192,
                   85626.91047424,
                   77062.183452672,
                   65536.0,
                   51491.304767488,
                   35467.8276096,
                   18081.341702144
                  ];

        if (this.Mapping == 1) {
            switch (this.selector) {
                case 0:
                    JTables.std_chrominance_qt = JTables.Tbl_000Y;
                    break;
                case 1:
                    JTables.std_chrominance_qt = JTables.Tbl_014Y;
                    break;
                case 2:
                    JTables.std_chrominance_qt = JTables.Tbl_029Y;
                    break;
                case 3:
                    JTables.std_chrominance_qt = JTables.Tbl_043Y;
                    break;
                case 4:
                    JTables.std_chrominance_qt = JTables.Tbl_057Y;
                    break;
                case 5:
                    JTables.std_chrominance_qt = JTables.Tbl_071Y;
                    break;
                case 6:
                    JTables.std_chrominance_qt = JTables.Tbl_086Y;
                    break;
                case 7:
                    JTables.std_chrominance_qt = JTables.Tbl_100Y;
                    break;
            }
        } else {
            switch (this.selector) {
                case 0:
                    JTables.std_chrominance_qt = JTables.Tbl_000UV;
                    break;
                case 1:
                    JTables.std_chrominance_qt = JTables.Tbl_014UV;
                    break;
                case 2:
                    JTables.std_chrominance_qt = JTables.Tbl_029UV;
                    break;
                case 3:
                    JTables.std_chrominance_qt = JTables.Tbl_043UV;
                    break;
                case 4:
                    JTables.std_chrominance_qt = JTables.Tbl_057UV;
                    break;
                case 5:
                    JTables.std_chrominance_qt = JTables.Tbl_071UV;
                    break;
                case 6:
                    JTables.std_chrominance_qt = JTables.Tbl_086UV;
                    break;
                case 7:
                    JTables.std_chrominance_qt = JTables.Tbl_100UV;
                    break;
            }
        }

        tempQT = this.setQuantizationTable(JTables.std_chrominance_qt, this.SCALEFACTORUV, tempQT);


        j = 0;

        for (row = 0; row <= 7; row++) {
        var scale_factor_value = scalefactor_mul[row];
            for (col = 0; col <= 7; col++) {
                quant_table[j] = (((tempQT[JTables.zigzag[j++]] & 0x00FF) * scale_factor_value *scalefactor[col]) | 0);
            }
        }

        delete tempQT;
        tempQT = null;

        return quant_table;
    },

    loadPass2LuminanceQuantizationTable: function(quant_table) {
        var scalefactor = [
            1.0,
            1.387039845,
            1.306562965,
            1.175875602,
            1.0,
            0.785694958,
            0.541196100,
            0.275899379
        ];

        var j, row, col, tempQT = new Uint8Array(64),
            temp;

    var scalefactor_mul = [65536.0,
                   90901.04328192,
                   85626.91047424,
                   77062.183452672,
                   65536.0,
                   51491.304767488,
                   35467.8276096,
                   18081.341702144
                  ];

        // Load quantization coefficients from JPG file, scale them for DCT and reorder
        // from zig-zag order
        switch (this.advance_selector) {
            case 0:
                JTables.std_luminance_qt = JTables.Tbl_000Y;
                break;
            case 1:
                JTables.std_luminance_qt = JTables.Tbl_014Y;
                break;
            case 2:
                JTables.std_luminance_qt = JTables.Tbl_029Y;
                break;
            case 3:
                JTables.std_luminance_qt = JTables.Tbl_043Y;
                break;
            case 4:
                JTables.std_luminance_qt = JTables.Tbl_057Y;
                break;
            case 5:
                JTables.std_luminance_qt = JTables.Tbl_071Y;
                break;
            case 6:
                JTables.std_luminance_qt = JTables.Tbl_086Y;
                break;
            case 7:
                JTables.std_luminance_qt = JTables.Tbl_100Y;
                break;
        }

        // Note: pass ADVANCE SCALE FACTOR to sub-function in Dual-JPEG
        tempQT = this.setQuantizationTable(JTables.std_luminance_qt, this.ADVANCESCALEFACTOR, tempQT);


        j = 0;

        for (row = 0; row <= 7; row++) {
        var scale_factor_value = scalefactor_mul[row];
            for (col = 0; col <= 7; col++) {
                 quant_table[j] = (((tempQT[JTables.zigzag[j++]] & 0x00FF)* scale_factor_value * scalefactor[col]) | 0) ;
            }
        }

        delete tempQT;
        tempQT = null;

        return quant_table;
    },

    loadPass2ChrominanceQuantizationTable: function(quant_table) {
        var scalefactor = [
            1.0,
            1.387039845,
            1.306562965,
            1.175875602,
            1.0,
            0.785694958,
            0.541196100,
            0.275899379
        ];

    var scalefactor_mul = [65536.0,
                   90901.04328192,
                   85626.91047424,
                   77062.183452672,
                   65536.0,
                   51491.304767488,
                   35467.8276096,
                   18081.341702144
                  ];

        var j, row, col, tempQT = new Uint8Array(64),
            temp;

        // Load quantization coefficients from JPG file, scale them for DCT and reorder
        // from zig-zag order
        if (this.Mapping == 1) {
            switch (this.advance_selector) {
                case 0:
                    JTables.std_chrominance_qt = JTables.Tbl_000Y;
                    break;
                case 1:
                    JTables.std_chrominance_qt = JTables.Tbl_014Y;
                    break;
                case 2:
                    JTables.std_chrominance_qt = JTables.Tbl_029Y;
                    break;
                case 3:
                    JTables.std_chrominance_qt = JTables.Tbl_043Y;
                    break;
                case 4:
                    JTables.std_chrominance_qt = JTables.Tbl_057Y;
                    break;
                case 5:
                    JTables.std_chrominance_qt = JTables.Tbl_071Y;
                    break;
                case 6:
                    JTables.std_chrominance_qt = JTables.Tbl_086Y;
                    break;
                case 7:
                    JTables.std_chrominance_qt = JTables.Tbl_100Y;
                    break;
            }
        } else {
            switch (this.advance_selector) {
                case 0:
                    JTables.std_chrominance_qt = JTables.Tbl_000UV;
                    break;
                case 1:
                    JTables.std_chrominance_qt = JTables.Tbl_014UV;
                    break;
                case 2:
                    JTables.std_chrominance_qt = JTables.Tbl_029UV;
                    break;
                case 3:
                    JTables.std_chrominance_qt = JTables.Tbl_043UV;
                    break;
                case 4:
                    JTables.std_chrominance_qt = JTables.Tbl_057UV;
                    break;
                case 5:
                    JTables.std_chrominance_qt = JTables.Tbl_071UV;
                    break;
                case 6:
                    JTables.std_chrominance_qt = JTables.Tbl_086UV;
                    break;
                case 7:
                    JTables.std_chrominance_qt = JTables.Tbl_100UV;
                    break;
            }
        }

        // Note: pass ADVANCE SCALE FACTOR to sub-function in Dual-JPEG
        tempQT = this.setQuantizationTable(JTables.std_chrominance_qt, this.ADVANCESCALEFACTORUV, tempQT);


        j = 0;

        for (row = 0; row <= 7; row++) {
        var scale_factor_value = scalefactor_mul[row];
            for (col = 0; col <= 7; col++) {
                 quant_table[j]= (((tempQT[JTables.zigzag[j++]] & 0x00FF) * scale_factor_value * scalefactor[col]) | 0);            }
        }

        delete tempQT;
        tempQT = null;

        return quant_table;
    },

    loadHuffmanTable: function(nrcode, value, huff_code, huff_code_low_byte) {
        var k, j, i,x, code, code_index;
      var len = 0;
        var ht = new HuffmanTable();


        code = 0;
        for (i = 0, k = 1; k <= 16; k++) {
        	ht.Length[k] = nrcode[k];
            for (j = 0, len =(ht.Length[k] & 0x00FF); j < len; j++) {
                ht.V[((((k & 0x00FF) << 8) | (j & 0x00FF))& 0x0000FFFF)] = value[i];
                i++;
            }
            ht.minor_code[k] = code;

            ht.major_code[k] = ((code += len) - 1);
            code *= 2;
            if ((len) == 0) {
                ht.minor_code[k] = 0xffff;
                ht.major_code[k] = 0;
            }
        }


        ht.len[0] = 2;
        i = 2;
        x = 3;

        for (code_index = 1; code_index < 65535; code_index++) {
            if (code_index >= huff_code[i]) {
            	i += 2;
            	x=i+1;
            	
            }
            ht.len[code_index] = huff_code_low_byte[x];
        }

        return ht;
    },

    decodeHuffmanDataUnit: function(DC_nr, AC_nr, previous_DC, position) {

		var nr = 1, k, tmp_Hcode, size_val = 0, count_0,
			byte_temp = 0;

		var  huff_values =	this.huff_values;
		var DCT_coeff = this.DCT_coeff;
		var HTDC_DC_nr = this.HTDC[DC_nr];
		var  HTAC_AC_nr= this.HTAC[AC_nr];
		var min_code = this.min_code;

		if(navigator.userAgent.indexOf('.NET') != -1){
			  for(var i = 0, len= DCT_coeff.length; i < len; i++){
				DCT_coeff[i] = 0;
			  }
		}else{
			DCT_coeff.fill(0);
		}

		min_code = HTDC_DC_nr.minor_code;
		huff_values = HTDC_DC_nr.V;

		//k = this.HTDC[DC_nr].len[this.currentData.shiftRight(16).and(this.BI_FULLINT).intValue()];
		var cd1 = (this.currentData >>> 16) & 0xffff;
		k = HTDC_DC_nr.len[cd1];
		tmp_Hcode = this.lookKbits(k);
		this.skipKbits(k);
		size_val = huff_values[((k & 0x00FF) << 8) | ( (tmp_Hcode - min_code[k]) & 0x00FF)];
		if (size_val == 0) {
			DCT_coeff[position + 0] = previous_DC[0];
		} else {
			previous_DC[0] = DCT_coeff[position] = previous_DC[0] + this.getKbits(size_val);
		}

		min_code = HTAC_AC_nr.minor_code;
		huff_values = HTAC_AC_nr.V;


		do {
			var cd2 = (this.currentData >>> 16) & 0xffff;
			k = HTAC_AC_nr.len[cd2];
			tmp_Hcode = this.lookKbits(k);
			this.skipKbits(k);
			byte_temp = huff_values[((k & 0x00FF) << 8) | ( (tmp_Hcode - min_code[k]) & 0x00FF)];
			size_val = byte_temp & 0x0f;
			count_0 = (byte_temp >> 4) & 0x0f;
			if (size_val == 0) {
				if (count_0 != 0x0f) {
					break;
				}
				nr += 16;
			} else {
				nr += count_0;
				DCT_coeff[position + JTables.dezigzag[nr]] = this.getKbits(size_val);
				nr++;
			}
		} while (nr < 64);
		this.huff_values =	huff_values;
		this.DCT_coeff =DCT_coeff;
		this.min_code = min_code;
		return previous_DC;
	},


    initHuffmanTable: function() {
        this.HTDC[0] = this.loadHuffmanTable(JTables.std_dc_luminance_nrcodes, JTables.std_dc_luminance_values, JTables.DC_LUMINANCE_HUFFMANCODE, JTables.DC_LUMINANCE_HUFFMANCODE_LOW_BYTE);
        this.HTAC[0] = this.loadHuffmanTable(JTables.std_ac_luminance_nrcodes, JTables.std_ac_luminance_values, JTables.AC_LUMINANCE_HUFFMANCODE, JTables.AC_LUMINANCE_HUFFMANCODE_LOW_BYTE);
        this.HTDC[1] = this.loadHuffmanTable(JTables.std_dc_chrominance_nrcodes, JTables.std_dc_chrominance_values, JTables.DC_CHROMINANCE_HUFFMANCODE, JTables.DC_CHROMINANCE_HUFFMANCODE_LOW_BYTE);
        this.HTAC[1] = this.loadHuffmanTable(JTables.std_ac_chrominance_nrcodes, JTables.std_ac_chrominance_values, JTables.AC_CHROMINANCE_HUFFMANCODE, JTables.AC_CHROMINANCE_HUFFMANCODE_LOW_BYTE);
    },


    /*initColorTable: function() {
		//IMPORTANT
		//color table has been calculated and used initilized in static way
		// This will avoid delay.
	},*/



    inverseDCT: function(index, nBlock) {
        var incquant = 0,
            incwsptr = 0,
            incinptr = 0,
            tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp10, tmp11, tmp12, tmp13, z5, z10, z11, z12, z13, ctr, dcval;

	var workspace = this.workspace;
	var m_QT = this.m_QT[nBlock];
	var DCT_coeff = this.DCT_coeff;
	var rangeLimitTable = this.rangeLimitTable;
	var YUVTile = this.YUVTile;
	var ctrMulti8 = new Array(0,8,16,24,32,40,48,56);
	var nZeroACTerms = this.nZeroACTerms;
	incinptr = index;

	 ctr = 7;
	 do{
			var inci_dct_0 = incinptr + ctrMulti8[0],
			inci_dct_1 = incinptr + ctrMulti8[1],
			inci_dct_2 = incinptr + ctrMulti8[2],
			inci_dct_3 = incinptr + ctrMulti8[3],
			inci_dct_4 = incinptr + ctrMulti8[4],
			inci_dct_5 = incinptr + ctrMulti8[5],
			inci_dct_6 = incinptr + ctrMulti8[6],
			inci_dct_7 = incinptr + ctrMulti8[7];

			var incw_dct_0 = incwsptr + ctrMulti8[0],
			incw_dct_1 = incwsptr + ctrMulti8[1],
			incw_dct_2 = incwsptr + ctrMulti8[2],
			incw_dct_3 = incwsptr + ctrMulti8[3],
			incw_dct_4 = incwsptr + ctrMulti8[4],
			incw_dct_5 = incwsptr + ctrMulti8[5],
			incw_dct_6 = incwsptr + ctrMulti8[6],
			incw_dct_7 = incwsptr + ctrMulti8[7];

			if ((DCT_coeff[inci_dct_1] |
			   DCT_coeff[inci_dct_2] |
				DCT_coeff[inci_dct_3] |
			   DCT_coeff[inci_dct_4] |
			   DCT_coeff[inci_dct_5] |
				DCT_coeff[inci_dct_6] |
				DCT_coeff[inci_dct_7]) == 0) {
				// AC terms all zero

				dcval = ((m_QT[incquant + ctrMulti8[0]] * DCT_coeff[inci_dct_0]) >> 16);//this.longMultiply(this.m_QT[nBlock][incquant + this.DCTSIZE_0], this.DCT_coeff[incinptr + this.DCTSIZE_0]);
				//console.log("dcval  :"+dcval );
			   workspace[incw_dct_0] = dcval;
				workspace[incw_dct_1] = dcval;
				workspace[incw_dct_2] = dcval;
			   workspace[incw_dct_3] = dcval;
				workspace[incw_dct_4] = dcval;
				workspace[incw_dct_5] = dcval;
				workspace[incw_dct_6] = dcval;
				workspace[incw_dct_7] = dcval;

				incinptr++; // advance pointers to next column
				incquant++;
				incwsptr++;
				nZeroACTerms++;
				continue;
			}

			// Even part
			tmp0 = ((m_QT[incquant + ctrMulti8[0]] * DCT_coeff[inci_dct_0]) >> 16);//this.longMultiply(this.m_QT[nBlock][incquant + this.DCTSIZE_0], this.DCT_coeff[incinptr + this.DCTSIZE_0]);
			tmp1 = ((m_QT[incquant + ctrMulti8[2]] * DCT_coeff[inci_dct_2]) >> 16);//this.longMultiply(this.m_QT[nBlock][incquant + this.DCTSIZE_2], this.DCT_coeff[incinptr + this.DCTSIZE_2]);
			tmp2 = ((m_QT[incquant + ctrMulti8[4]] * DCT_coeff[inci_dct_4]) >> 16);//this.longMultiply(this.m_QT[nBlock][incquant + this.DCTSIZE_4], this.DCT_coeff[incinptr + this.DCTSIZE_4]);
			tmp3 = ((m_QT[incquant + ctrMulti8[6]] * DCT_coeff[inci_dct_6]) >> 16);//this.longMultiply(this.m_QT[nBlock][incquant + this.DCTSIZE_6], this.DCT_coeff[incinptr + this.DCTSIZE_6]);

			tmp10 = tmp0 + tmp2; // phase 3
			tmp11 = tmp0 - tmp2;

			tmp13 = tmp1 + tmp3; // phases 5-3
			tmp12 = (((tmp1 - tmp3) * (this.FIX_1_414213562)) >> 8) - tmp13; // 2*c4 //this.MULTIPLY(tmp1 - tmp3, this.FIX_1_414213562) - tmp13; // 2*c4

			tmp0 = tmp10 + tmp13; // phase 2
			tmp3 = tmp10 - tmp13;
			tmp1 = tmp11 + tmp12;
			tmp2 = tmp11 - tmp12;

			// Odd part
			tmp4 = ((m_QT[incquant + ctrMulti8[1]] * DCT_coeff[inci_dct_1]) >> 16);//this.longMultiply(this.m_QT[nBlock][incquant + this.DCTSIZE_1], this.DCT_coeff[incinptr + this.DCTSIZE_1]);
			tmp5 = ((m_QT[incquant + ctrMulti8[3]] * DCT_coeff[inci_dct_3]) >> 16);//this.longMultiply(this.m_QT[nBlock][incquant + this.DCTSIZE_3], this.DCT_coeff[incinptr + this.DCTSIZE_3]);
			tmp6 = ((m_QT[incquant + ctrMulti8[5]] * DCT_coeff[inci_dct_5]) >> 16);//this.longMultiply(this.m_QT[nBlock][incquant + this.DCTSIZE_5], this.DCT_coeff[incinptr + this.DCTSIZE_5]);
			tmp7 = ((m_QT[incquant + ctrMulti8[7]] * DCT_coeff[inci_dct_7]) >> 16);//this.longMultiply(this.m_QT[nBlock][incquant + this.DCTSIZE_7], this.DCT_coeff[incinptr + this.DCTSIZE_7]);

			z13 = tmp6 + tmp5; // phase 6
			z10 = tmp6 - tmp5;
			z11 = tmp4 + tmp7;
			z12 = tmp4 - tmp7;

			tmp7 = z11 + z13; // phase 5
			tmp11 = ((z11 - z13)* (this.FIX_1_414213562)) >> 8; // 2*c4

			z5 = ((z10 + z12) * (this.FIX_1_847759065)) >> 8; // 2*c2
			tmp10 = ((z12 * this.FIX_1_082392200) >> 8) - z5; // 2*(c2-c6)
			tmp12 = ((z10 * -this.FIX_2_613125930) >> 8) + z5; // -2*(c2+c6)

			tmp6 = tmp12 - tmp7; // phase 2
			tmp5 = tmp11 - tmp6;
			tmp4 = tmp10 + tmp5;

			workspace[incw_dct_0] = (tmp0 + tmp7);
			workspace[incw_dct_7] = (tmp0 - tmp7);
			workspace[incw_dct_1] = (tmp1 + tmp6);
			workspace[incw_dct_6] = (tmp1 - tmp6);
			workspace[incw_dct_2] = (tmp2 + tmp5);
			workspace[incw_dct_5] = (tmp2 - tmp5);
			workspace[incw_dct_4] = (tmp3 + tmp4);
		   workspace[incw_dct_3] = (tmp3 - tmp4);

			incinptr++; // advance pointers to next column
			incquant++;
			incwsptr++;
		}while((ctr--));
	 

		var index1 = 0;
		var re = 0;
	  
		ctr = this.DCTSIZE -1;
		incwsptr = ctr * this.DCTSIZE;
		do{
			index1 = index + ctrMulti8[ctr]; //index + (ctr * 8)
			//outptr = data;

			// Rows of zeroes can be exploited in the same way as we did with columns.
			// However, the column calculation has created many nonzero AC terms, so
			// the simplification applies less often (typically 5% to 10% of the time).
			// On machines with very fast multiplication, it's possible that the
			// test takes more time than it's worth.  In that case this section
			// may be commented out.

			// Even part
			tmp10 = workspace[incwsptr + 0] + workspace[incwsptr + 4];
			tmp11 = workspace[incwsptr + 0] - workspace[incwsptr + 4];

			tmp13 = workspace[incwsptr + 2] + workspace[incwsptr + 6];
			tmp12 = (((workspace[incwsptr + 2] - workspace[incwsptr + 6]) * this.FIX_1_414213562) >> 8) - tmp13;

			tmp0 = tmp10 + tmp13;
			tmp3 = tmp10 - tmp13;
			tmp1 = tmp11 + tmp12;
			tmp2 = tmp11 - tmp12;

			// Odd part
			z13 = workspace[incwsptr + 5] + workspace[incwsptr + 3];
			z10 = workspace[incwsptr + 5] - workspace[incwsptr + 3];
			z11 = workspace[incwsptr + 1] + workspace[incwsptr + 7];
			z12 = workspace[incwsptr + 1] - workspace[incwsptr + 7];

			tmp7 = z11 + z13; // phase 5
			tmp11 = ((z11 - z13) * this.FIX_1_414213562) >> 8; // 2*c4

			z5 = ((z10 + z12) * this.FIX_1_847759065) >> 8; // 2*c2
			tmp10 = ((z12 * this.FIX_1_082392200) >> 8) - z5; // 2*(c2-c6)
			tmp12 = ((z10 * -this.FIX_2_613125930)	>> 8 ) + z5; // -2*(c2+c6)

			tmp6 = tmp12 - tmp7; // phase 2
			tmp5 = tmp11 - tmp6;
			tmp4 = tmp10 + tmp5;

			// Final output stage: scale down by a factor of 8 and range-limit
			re = 0;
			re = (((tmp0 + tmp7) >> 3) & 1023) + 384;//re = 128 + (((tmp0 + tmp7) >> 3) & 1023) + 256;
			YUVTile[index1 + 0] = rangeLimitTable[re];

			re = (((tmp0 - tmp7) >> 3) & 1023) + 384;
			YUVTile[index1 + 7] = rangeLimitTable[re];

			re = ((((tmp1 + tmp6) >> (3))) & 1023) + 384;
			YUVTile[index1 + 1] = rangeLimitTable[re];

			re = ((((tmp1 - tmp6) >> (3))) & 1023) + 384;
			YUVTile[index1 + 6] = rangeLimitTable[re];

			re = ((((tmp2 + tmp5) >> (3))) & 1023) + 384;
			YUVTile[index1 + 2] = rangeLimitTable[re];

			re = ((((tmp2 - tmp5) >> (3))) & 1023) + 384;
			YUVTile[index1 + 5] = rangeLimitTable[re];

			re = ((((tmp3 + tmp4) >> (3))) & 1023) + 384;
			YUVTile[index1 + 4] = rangeLimitTable[re];

			re = ((((tmp3 - tmp4) >> (3))) & 1023) + 384;
			YUVTile[index1 + 3] = rangeLimitTable[re];

			incwsptr -= this.DCTSIZE; // advance pointer to next row
		}while((ctr--));
		this.workspace = workspace;
		this.m_QT[nBlock] = m_QT;
		this.YUVTile = YUVTile;
		this.nZeroACTerms = nZeroACTerms;
	},

    updateReadBuf: function(walks) {

		var skipMask = -1;
		var cd = this.currentData & 0xffffffff,//this.getLongCurrent(), 
		nd = this.nextData	& 0xffffffff;//this.getLongNext();
		var m_newbits = this.m_newbits;
		if ((m_newbits - walks) <= 0) {
			
			var indexData = ((this.m_RecvBuffer[SOCIVTPPktHdr.VIRTADD + this._index])  & 0xffffffff);//this.getLongIndexed(),
		   	this._index++;
		  
			this.currentData = ((cd & skipMask) << walks) | ((nd | indexData >>> m_newbits) >>> (32 - walks));
			this.nextData = (indexData & (0xffffffff >>> (walks - m_newbits))) << (walks - m_newbits);

			this.m_newbits = 32 + m_newbits - walks;
		} else {
			this.currentData = ((cd & skipMask) << walks) | (nd >>> (32 - walks));
			this.nextData = (nd & skipMask) << walks;
			this.m_newbits -= walks;
		}
	},


    convertYUVtoRGB: function(txb, tyb) {
		var i, j, pos, m, n, y, cb, cr, pixel_x, pixel_y, count = 0,
			r = 0,
			g = 0,
			b = 0,
			temp = 8;

		var py420 = [];

		var YUVTile = this.YUVTile;
		var m_decodeBuf = this.m_decodeBuf;
		var rangeLimitTable = this.rangeLimitTable;
		var m_Y = this.m_Y;
		var m_CbToB = this.m_CbToB;
		var m_CbToG = this.m_CbToG;
		var m_CrToG = this.m_CrToG;
		var m_CrToR = this.m_CrToR;

		if (this.mode420 == 0) { // YUV 444
			var width_height_mul = this.realWidth * this.realHeight * 4;
		 	var  previousYUVData = this.previousYUVData;

			pixel_x = txb * 8;
			pixel_y = tyb * 8;
			pos = (pixel_y * this.realWidth) + pixel_x;

			temp = this.realWidth - pixel_x;
			if ((temp == 0) || (temp > 8))
				temp = 8;

			var jLeftShift3 = new Array(56,48,40,32,24,16,8,0); //reverse way of j << 3;

			j = 7; //8-1
		 	do { 
				n = (pos ) * 4;
				m = jLeftShift3[j];
				i = temp -1;
				do{

					/* save YUV values for pass 2 */
					previousYUVData[n] = y = YUVTile[m];//this.py[m];
					previousYUVData[n + 1] = cb = YUVTile[m+64];//this.pcb[m];
					previousYUVData[n + 2] = cr = YUVTile[m+128];//this.pcr[m];

					if (n < width_height_mul) { // point is inside this.FRAME
						/* get RGB value from pre-calculated table */
						b = m_Y[y] + m_CbToB[cb];
						g = m_Y[y] + m_CbToG[cb] + m_CrToG[cr];
						r = m_Y[y] + m_CrToR[cr];

						/* corresponding value of 0:255 are stored in range table[256:511] */
						r = ((r >= 0) ? (r+=256) : 0);
						g = ((g >= 0) ? (g+=256) : 0);
						b = ((b >= 0) ? (b+=256) : 0);

						m_decodeBuf[n] = rangeLimitTable[r];
						m_decodeBuf[n + 1] = rangeLimitTable[g];
						m_decodeBuf[n + 2] = rangeLimitTable[b];
						m_decodeBuf[n + 3] = 0xff;

						//console.log(n, this.rangeLimitTable[r], this.rangeLimitTable[g], this.rangeLimitTable[b]);
						//TODO: understand this 
						//m_socvidClnt.SetPointInSavedScreen(pixel_x + i, pixel_y + j, m_decodeBuf[n], m_decodeBuf[n + 1], m_decodeBuf[n + 2]);
					}
					n +=4;
					m ++;
				}while(i--);

				pos += this.realWidth;
			}while(j--);
			da++;
			this.previousYUVData = previousYUVData;
			//this.video.imageBuffer.data = this.m_decodeBuf;
			//this.video.context.putImageData(this.video.imageBuffer,0,0);
		} else { // YUV 420
        
				//this.py420[i] = this.YUVTile.subarray(i * 64, ((i + 1) * 64)); // It's a [ 4 x 64 ] array
				py420[0] = YUVTile.subarray(0, 64); // It's a [ 4 x 64 ] array
				py420[1] = YUVTile.subarray(64, 128); // It's a [ 4 x 64 ] array
				py420[2] = YUVTile.subarray(128, 192); // It's a [ 4 x 64 ] array
				py420[3] = YUVTile.subarray(192, 256); // It's a [ 4 x 64 ] array

			// Get tile starting pixel position
			pixel_x = txb * 16;
			pixel_y = tyb * 16;

			pos = (pixel_y * this.width) + pixel_x;

			var index = 0;
			//static array's
			var inds = new Array (0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,56,57,58,59,60,61,62,63,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,56,57,58,59,60,61,62,63);
			var s =new Array(0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3);
			var mArray = new Array(0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63);
			// for 800x600 support
			var jMax = 16;
			if ((this.height == 608) && (tyb == 37))
				jMax = 8;

			jMax --;
			do {// vertical axis

				n = (pos ) * 4;
				i = 15; //16 -1
				do { // horizontal axis
					m = mArray[index];

					y = py420[s[index]][inds[index]];
					cb = YUVTile[m+256];//this.pcb[m];
					cr = YUVTile[m+320];//this.pcr[m];

					b = m_Y[y] + m_CbToB[cb];
					g = m_Y[y] + (m_CbToG[cb] + m_CrToG[cr]);
					r = m_Y[y] + m_CrToR[cr];

					m_decodeBuf[n] =  (r >= 0) ? rangeLimitTable[r + 256] : 0;
					m_decodeBuf[n + 1] = (g >= 0) ? rangeLimitTable[g + 256] : 0;
					m_decodeBuf[n + 2] = (b >= 0) ? rangeLimitTable[b + 256] : 0;
					m_decodeBuf[n + 3] = 0xff; // ???? m_socvidClnt.SetPointInSavedScreen();
					index++;
					n +=4;
				}while(i --);
				pos += this.realWidth;
			}while(jMax --);
			//this.video.imageBuffer.data = this.m_decodeBuf;
			//this.video.context.putImageData(this.video.imageBuffer,0,0);
		}
			this.m_decodeBuf = m_decodeBuf;
	},


    convertYUVToRGBPass2: function(txb, tyb) {
		var i, j, pos, m, n;
		var y, cb, cr;
		var r, g, b;
		var pixel_x, pixel_y;
		var temp = 8;

		if (this.mode420 == 0) {  // YUV 444
			var width_height_mul = this.realWidth * this.realHeight * 4;
			var jLeftShift3 = new Array( 0,8,16,24,32,40,48,56); // j << 3;

			var previousYUVData = this.previousYUVData;
			var m_decodeBuf = this.m_decodeBuf;
			var YUVTile = this.YUVTile;
			var rangeLimitTable = this.rangeLimitTable;
			var m_Y = this.m_Y;
			var m_CbToB = this.m_CbToB;
			var m_CbToG = this.m_CbToG;
			var m_CrToG = this.m_CrToG;
			var m_CrToR = this.m_CrToR;

			pixel_x = txb * 8;
			pixel_y = tyb * 8;
			pos = (pixel_y * this.realWidth) + pixel_x;

			temp = this.realWidth - pixel_x;
			if ((temp == 0) || (temp > 8))
				temp = 8;

			for (j = 0; j < 8; j++) {
				n = (pos ) * 4;
				for (i = 0; i < temp; i++) {					
					if (n < (width_height_mul)) { // point is inside this.FRAME
						m = jLeftShift3[j] + i; // (j * 8) + i

						/* get the YUV value */
						y = previousYUVData[n] + (YUVTile[m] - 128);
						cb = previousYUVData[n + 1] + (YUVTile[m+64] - 128);
						cr = previousYUVData[n + 2] + (YUVTile[m+128] - 128);

						/* aovid out of range */
						if (y < 0) y = 0;
						else if (y > 255) y = 255;
						if (cb < 0) cb = 0;
						else if (cb > 255) cb = 255;
						if (cr < 0) cr = 0;
						else if (cr > 255) cr = 255;

						/* get RGB value from pre-calculated table */
						b = m_Y[y] + m_CbToB[cb];
						g = m_Y[y] + (m_CbToG[cb] + m_CrToG[cr]);
						r = m_Y[y] + m_CrToR[cr];

						if(r>=0)
							m_decodeBuf[n] = rangeLimitTable[r+256];
						if(g>=0)
							m_decodeBuf[n + 1] = rangeLimitTable[g+256];
						if(b>=0)
							m_decodeBuf[n + 2] = rangeLimitTable[b+256];
						m_decodeBuf[n + 3] = 0xff;
					}
					n +=4;
				}

				pos += this.realWidth;
			}
			dp2++;
			this.m_decodeBuf = m_decodeBuf;
			
			//this.video.imageBuffer.data = this.m_decodeBuf;
			//this.video.context.putImageData(this.video.imageBuffer,0,0);
		} else {
			//console.log("Receive Pass 2 data in YUV420 mode");
		}
	},


    decompressJPEG: function(txb, tyb, QT_TableSelection) {
		//this.YUVTile = new Uint8Array(768);
		var m_YDC_nr = this.m_YDC_nr;
		var m_YAC_nr = this.m_YAC_nr;
		var m_DCY = this.m_DCY;
		var m_CbDC_nr = this.m_CbDC_nr;
		var m_CbAC_nr = this.m_CbAC_nr;

		m_DCY = this.decodeHuffmanDataUnit(m_YDC_nr, m_YAC_nr, m_DCY, 0);
		this.inverseDCT(0, QT_TableSelection);

		if (this.mode420 == 1) {
			m_DCY = this.decodeHuffmanDataUnit(m_YDC_nr, m_YAC_nr, m_DCY, 64);
			this.inverseDCT(64, QT_TableSelection);

			m_DCY = this.decodeHuffmanDataUnit(m_YDC_nr, m_YAC_nr, m_DCY, 128);
			this.inverseDCT(128, QT_TableSelection);

			if ((SOCIVTPPktHdr.gTxb == 0) && (SOCIVTPPktHdr.gTyb == 1))
				SOCIVTPPktHdr.gCheck = 100;

			m_DCY = this.decodeHuffmanDataUnit(m_YDC_nr, m_YAC_nr, m_DCY, 192);
			this.inverseDCT(192, QT_TableSelection);
			if (SOCIVTPPktHdr.gTxb == 0 && SOCIVTPPktHdr.gTyb == 1)
				SOCIVTPPktHdr.gCheck = 101;

			this.DCCb = this.decodeHuffmanDataUnit(m_CbDC_nr, m_CbAC_nr, this.DCCb, 256);
			this.inverseDCT(256, QT_TableSelection + 1);

			this.DCCr = this.decodeHuffmanDataUnit(this.m_CrDC_nr, this.m_CrAC_nr, this.DCCr, 320);
			this.inverseDCT(320, QT_TableSelection + 1);

		} else {

			this.DCCb = this.decodeHuffmanDataUnit(m_CbDC_nr, m_CbAC_nr, this.DCCb, 64);
			this.inverseDCT(64, QT_TableSelection + 1);

			this.DCCr = this.decodeHuffmanDataUnit(this.m_CrDC_nr, this.m_CrAC_nr, this.DCCr, 128);
			this.inverseDCT(128, QT_TableSelection + 1);
		}

		this.m_DCY = m_DCY;
		this.convertYUVtoRGB(txb, tyb);
	},

    decompressJPEGPass2: function(txb, tyb, QT_TableSelection) {
        this.m_DCY = this.decodeHuffmanDataUnit(this.m_YDC_nr, this.m_YAC_nr, this.m_DCY, 0);
        this.inverseDCT(0, QT_TableSelection);

        this.DCCb = this.decodeHuffmanDataUnit(this.m_CbDC_nr, this.m_CbAC_nr, this.DCCb, 64);
        this.inverseDCT(64, (QT_TableSelection + 1));

        this.DCCr = this.decodeHuffmanDataUnit(this.m_CrDC_nr, this.m_CrAC_nr, this.DCCr, 128);
        this.inverseDCT(128, (QT_TableSelection + 1));

        this.convertYUVToRGBPass2(txb, tyb);
    },

    decompressVQ: function(txb, tyb, QT_TableSelection) {
		var Data = 0;
		var count = 0;
		var i = 64;
		var ptr = this.YUVTile; //new Uint8Array(192);

		var Color = this.m_VQ.Color;
		var Index = this.m_VQ.Index;
		var BitMapBits = this.m_VQ.BitMapBits;

		if (BitMapBits == 0) {
			var rightShift16_0 = (Color[Index[0]] & 0xFF0000) >>> 16;
			var rightShift8_64 = (Color[Index[0]]  & 0xFF00) >>> 8;
			var noShift128 =  (Color[Index[0]] & 0xFF);
			
			do {
				ptr[count + 0] = rightShift16_0;
				ptr[count + 64] = rightShift8_64;
				ptr[count + 128] = noShift128;
				count++;
			}while(i--);
		} else {
			do {
				Data = (this.lookKbits(BitMapBits));
				var colorData = Color[Index[Data]];
				ptr[count + 0] = ( colorData & 0xFF0000) >>> 16;
				ptr[count + 64] = (colorData & 0xFF00) >>> 8;
				ptr[count + 128] = (colorData & 0xFF);
				count++;
				this.skipKbits(BitMapBits);
			}while(i--);
		}

		this.YUVTile = ptr;

		this.convertYUVtoRGB(txb, tyb);
	},

    moveBlockIndex: function() {
         // console.log("moveBlockIndex start txb " + this.txb + " this.tyb " + this.tyb);
        this.txb++;

        //if (this.txb == this.tmp_w16);
        //TODO: repaint
        //m_view.repaint((txb - 1) * 16, tyb * 16, 16, 16);

        if (this.mode420 == 0) { // YUV 444
            if (this.txb >= (this.tmp_w16 / 8)) {
                this.tyb++;
                if (this.tyb >= (this.tmp_h16 / 8))
                    this.tyb = 0;
                this.txb = 0;
            }
        } else { // YUV 420
            if (this.txb >= (this.tmp_w16 / 16)) {
                this.tyb++;
                if (this.tyb >= (this.tmp_h16 / 16))
                    this.tyb = 0;
                this.txb = 0;
            }
        }

        SOCIVTPPktHdr.gTxb = this.txb;
        SOCIVTPPktHdr.gTyb = this.tyb;
        this.pixels += 256;
    },

    indexedData: function() {

        return this.m_RecvBuffer[SOCIVTPPktHdr.VIRTADD + this._index];
    },

    currentHeader: function() {
        var cd = this.currentData;

        return (cd >>> 28) & (this.BLOCK_HEADER_MASK);
    },

    updateXY: function() {
        this.txb = (this.currentData & 0x0FF00000) >>> 20;
        this.tyb = (this.currentData & 0x0FF000) >>> 12;
    },

    chkVQHdr: function(hdr) {
        var cd = this.currentData;
        return ((cd >>> 31) & this.VQ_HEADER_MASK) == hdr;
    },

    updateVQColor: function(i) {
        this.m_VQ.Index[i] = (this.currentData >>> 29) & (this.VQ_INDEX_MASK);//this.VQindex();

        if (this.chkVQHdr(this.VQ_NO_UPDATE_HEADER)) {
            this.updateReadBuf(this.VQ_NO_UPDATE_LENGTH);
        } else {
            this.m_VQ.Color[this.m_VQ.Index[i]] = (this.currentData >>> 5) & this.VQ_COLOR_MASK;
            this.updateReadBuf(this.VQ_UPDATE_LENGTH);
        }
    },

    decode: function(videoEngineInfo, recvBuffer) {
    var videoEngInfo = videoEngineInfo;
    try{

       var moduldDivisor = this.moduldDivisor;

        if ((this.width != videoEngInfo.SourceModeInfo.X) ||
            (this.height != videoEngInfo.SourceModeInfo.Y)||
            (this.mode420 != videoEngInfo.Mode420))
        {
            this.realWidth = this.width = videoEngInfo.SourceModeInfo.X;
            this.realHeight = this.height = videoEngInfo.SourceModeInfo.Y;
            this.moduldDivisor = moduldDivisor = (videoEngInfo.Mode420 == 1) ? 16 : 8;
            var new_width = (this.width & ( moduldDivisor-1)); //this.width % moduldDivisor;
            var new_height =  (this.height & ( moduldDivisor-1));//this.height % moduldDivisor;
            if (new_width != 0) {
                this.width += moduldDivisor - (new_width);
            }
            if (new_height != 0) {
                this.height += moduldDivisor - (new_height);
            }
        }

        if ((this.tmp_w16 != videoEngInfo.DestinationModeInfo.X) ||
            (this.tmp_h16 != videoEngInfo.DestinationModeInfo.Y)||
            (this.mode420 != videoEngInfo.Mode420))
        {
            this.tmp_w16 = videoEngInfo.DestinationModeInfo.X;
            this.tmp_h16 = videoEngInfo.DestinationModeInfo.Y;          

            this.moduldDivisor = moduldDivisor = (videoEngInfo.Mode420 == 1) ? 16 : 8;
            var t_new_width = (this.tmp_w16 & (moduldDivisor -1)); //this.tmp_w16 % moduldDivisor;
            var t_new_height =  (this.tmp_h16 & (moduldDivisor-1));//this.tmp_h16 % moduldDivisor;

            if (t_new_width != 0) {
                this.tmp_w16 += moduldDivisor - (t_new_width);
            }
            if (t_new_height != 0) {
                this.tmp_h16 += moduldDivisor - (t_new_height);
            }
        }

        this.mode420 = videoEngInfo.Mode420;

        this.CompressBufferSize = (videoEngInfo.CompressData.CompressSize / 4);

        //RC4 Decoding. key expansion, rc4_setup, rc4_crypt
        if (videoEngInfo.FrameHeader.RC4Enable == 1) {
            if (this.decodeRC4State == false) {
                this.keyExpansion();
                this.setupDecodeRC4(videoEngInfo);
            }
            this.RC4Crypt(this.m_RecvBuffer, CompressBufferSize * 4);
        }


            this.selector = videoEngInfo.FrameHeader.JPEGTableSelector;
//      console.log("this.selector " + this.selector);
        this.advance_selector = videoEngInfo.FrameHeader.AdvanceTableSelector;
        this.Mapping = videoEngInfo.FrameHeader.JPEGYUVTableMapping;

	if(this.firstframe ==1){
		this.firstframe = 0;
	        if(this.m_QT[0].length ==0)
	            this.m_QT[0] = this.loadLuminanceQuantizationTable(this.m_QT[0]);
	        if(this.m_QT[1].length ==0)
	            this.m_QT[1] = this.loadChrominanceQuantizationTable(this.m_QT[1]);
	        if(this.m_QT[2].length ==0)
	            this.m_QT[2] = this.loadPass2LuminanceQuantizationTable(this.m_QT[2]);
	        if(this.m_QT[3].length ==0)
	            this.m_QT[3] = this.loadPass2ChrominanceQuantizationTable(this.m_QT[3]);
	}

        this.m_RecvBuffer = recvBuffer;
        this._index = 2;

        this.txb = this.tyb = 0;
        this.m_newbits = 32;
        this.m_DCY[0] = this.DCCb[0] = this.DCCr[0] = 0;

        this.currentData = this.m_RecvBuffer[0];
        this.nextData = this.m_RecvBuffer[1];

//        nts = new Date().getTime();

//        debug += "Decode function before decodebuffer = "+((nts-ots)/1000)+" secs<br/>";

        this.decodeBuffer();
        }catch(e) {
            stack_trace(e);
        }
    },


    decodeBuffer: function() {

        //      this.video.imageBuffer.data = this.m_decodeBuf;
        //      this.video.repaint();
        var aspeed = this;
        var bufferSize = aspeed.CompressBufferSize;
        do {

            switch (this.currentHeader()) {
                case this.JPEG_NO_SKIP_CODE:
                    this.updateReadBuf(this.BLOCK_AST2100_START_LENGTH);
                    this.decompressJPEG(this.txb, this.tyb, 0);
                    //console.log("JPEG_NO_SKIP_CODE", this.txb, this.tyb, this.currentData);
                    this.moveBlockIndex();
                    break;

                case this.JPEG_SKIP_CODE:
                    this.updateXY();

                    this.updateReadBuf(this.BLOCK_AST2100_SKIP_LENGTH);
                    this.decompressJPEG(this.txb, this.tyb, 0);
                    //console.log("JPEG_SKIP_CODE", this.txb, this.tyb, this.currentData);
                    this.moveBlockIndex();
                    break;

                case this.JPEG_NO_SKIP_PASS2_CODE:
                    this.updateReadBuf(this.BLOCK_AST2100_START_LENGTH);
                    this.decompressJPEGPass2(this.txb, this.tyb, 2);
                    //console.log("JPEG_NO_SKIP_PASS2_CODE", this.txb, this.tyb, this.currentData);
                    this.moveBlockIndex();
                    break;

                case this.JPEG_SKIP_PASS2_CODE:
                    this.updateXY();

                    this.updateReadBuf(this.BLOCK_AST2100_SKIP_LENGTH);
                    this.decompressJPEGPass2(this.txb, this.tyb, 2);
                    //console.log("JPEG_NO_SKIP_PASS2_CODE", this.txb, this.tyb, this.currentData);
                    this.moveBlockIndex();
                    break;

                case this.VQ_NO_SKIP_1_COLOR_CODE:
                    this.updateReadBuf(this.BLOCK_AST2100_START_LENGTH);

                    this.m_VQ.BitMapBits = 0;

                    this.updateVQColor(0);

                    this.decompressVQ(this.txb, this.tyb, 0);
                    //console.log("VQ_NO_SKIP_1_COLOR_CODE", this.txb, this.tyb, this.currentData);
                    this.moveBlockIndex();
                    break;

                case this.VQ_SKIP_1_COLOR_CODE:
                    this.updateXY();

                    this.updateReadBuf(this.BLOCK_AST2100_SKIP_LENGTH);
                    this.m_VQ.BitMapBits = 0;

                    this.updateVQColor(0);

                    this.decompressVQ(this.txb, this.tyb, 0);
                    //console.log("VQ_SKIP_1_COLOR_CODE", this.txb, this.tyb, this.currentData);
                    this.moveBlockIndex();
                    break;

                case this.VQ_NO_SKIP_2_COLOR_CODE:
                    this.updateReadBuf(this.BLOCK_AST2100_START_LENGTH);
                    this.m_VQ.BitMapBits = 1;

                    this.updateVQColor(0);
                    this.updateVQColor(1);

                    this.decompressVQ(this.txb, this.tyb, 0);
                    //console.log("VQ_NO_SKIP_2_COLOR_CODE", this.txb, this.tyb, this.currentData);
                    this.moveBlockIndex();
                    break;

                case this.VQ_SKIP_2_COLOR_CODE:
                    this.updateXY();

                    this.updateReadBuf(this.BLOCK_AST2100_SKIP_LENGTH);
                    this.m_VQ.BitMapBits = 1;

                    this.updateVQColor(0);
                    this.updateVQColor(1);
                    this.decompressVQ(this.txb, this.tyb, 0);
                    //console.log("VQ_SKIP_2_COLOR_CODE", this.txb, this.tyb, this.currentData);
                    this.moveBlockIndex();
                    break;

                case this.VQ_NO_SKIP_4_COLOR_CODE:
                    this.updateReadBuf(this.BLOCK_AST2100_START_LENGTH);
                    this.m_VQ.BitMapBits = 2;

                    this.updateVQColor(0);
                    this.updateVQColor(1);
                    this.updateVQColor(2);
                    this.updateVQColor(3);
                    this.decompressVQ(this.txb, this.tyb, 0);
                    //console.log("VQ_NO_SKIP_4_COLOR_CODE", this.txb, this.tyb, this.currentData);
                    this.moveBlockIndex();
                    break;

                case this.VQ_SKIP_4_COLOR_CODE:
                    this.updateXY();

                    this.updateReadBuf(this.BLOCK_AST2100_SKIP_LENGTH);
                    this.m_VQ.BitMapBits = 2;

                    this.updateVQColor(0);
                    this.updateVQColor(1);
                    this.updateVQColor(2);
                    this.updateVQColor(3);
                    this.decompressVQ(this.txb, this.tyb, 0);
                    //console.log("VQ_SKIP_4_COLOR_CODE", this.txb, this.tyb, this.currentData);
                    this.moveBlockIndex();
                    break;

                case this.LOW_JPEG_NO_SKIP_CODE:
                    this.updateReadBuf(this.BLOCK_AST2100_START_LENGTH);
                    this.decompressJPEG(this.txb, this.tyb, 2);
                    //console.log("LOW_JPEG_NO_SKIP_CODE", this.txb, this.tyb, this.currentData);
                    this.moveBlockIndex();
                    break;

                case this.LOW_JPEG_SKIP_CODE:
                    this.updateXY();

                    this.updateReadBuf(this.BLOCK_AST2100_SKIP_LENGTH);
                    this.decompressJPEG(this.txb, this.tyb, 2);
                    //console.log("LOW_JPEG_SKIP_CODE", this.txb, this.tyb, this.currentData);
                    this.moveBlockIndex();
                    break;

                case this.FRAME_END_CODE:
                    //this.video.imageBuffer.data = this.m_decodeBuf;
                    //this.video.repaint();
                    delete this.m_RecvBuffer;
                    this.m_RecvBuffer = null;

                    //console.log("FRAME_END_CODE");
                    return;

                default:
                    //console.log("Unknow Marco this.BLOCK type " + this.getLongCurrent().shiftRight(28));
                    this.updateReadBuf(this.VQ_NO_UPDATE_LENGTH);
                    this.moveBlockIndex();
            }

            //setTimeout(function(){
            //static_log("callstack " + aspeed._index + " " + aspeed.CompressBufferSize);
        }while (aspeed._index < bufferSize);

        delete this.m_RecvBuffer;
        this.m_RecvBuffer = null;


    },




    keyExpansion: function() {
        var i, slen;
        slen = this.decodeKeys.length;
        var decodeKeys = this.decodeKeys;
        i = 255;
        do{
            decodeKeys[i] = decodeKeys[i % slen];
        }while(i--);
        this.decodeKeys = decodeKeys;
    },

    setupDecodeRC4: function(videoEngInfo) {
        var i, j, k, a, m;

        this.s.x = 0;
        this.s.y = 0;
        m = this.s.m;
        var decodeKeys = this.decodeKeys;

        i = 255
        do{
            m[i] = i;
        }while(i--);

        j = k = 0;
        for (i = 0; i < 256; i++) {
            a = m[i];
            j = (j + a + decodeKeys[k]);
            m[i] = m[j];
            m[j] = a;
            k++;
        }
    },

    RC4Crypt: function(data, length) {
        var i, x, y, a, b;

        x = this.s.x;
        y = this.s.y;
        var rc4Tmp = this.s.m;

        for (i = 0; i < length; i++) {
            x += 1;
            a = rc4Tmp[x];
            y += a;
            rc4Tmp[x] = rc4Tmp[y];
            rc4Tmp[y] = a;
            data[SOCIVTPPktHdr.VIRTADD + i] = data[SOCIVTPPktHdr.VIRTADD + i] ^ rc4Tmp[a + b];
        }

        this.s.x = x;
        this.s.y = y;
        this.rc4Tmp = rc4Tmp;
    }

}

var COLOR_CACHE = function() {
    this.Color = [];
    this.Index = new Uint8Array(4);
    this.BitMapBits;
}

var RC4State = function() {
    this.x = 0;
    this.y = 0;
    this.m = new Int32Array(256);
}

var CompressHeader = function() {
    this.codesize = 0,
    this.width = 0,
    this.height = 0,
    this.modes = 0,
    this.bwidth = 0,
    this.bheight = 0,
    this.nd0 = 0,
    this.nd1 = 0,
    this.cmptype = 0,
    this.qfactor = 0,
    this.qfactoruv = 0,
    this.nd11 = 0,
    this.nd12 = 0,
    this.nd13 = 0,
    this.nd14 = 0,
    this.nd15 = 0;
}

var HuffmanTable = function() {
    this.Length = new Int8Array(17);
    this.minor_code = new Int16Array(17);
    this.major_code = new Int16Array(17);
    this.V = new Int16Array(65536);
    this.len = new Int8Array(65536);
}

var SOCIVTPPktHdr = {
    IVTP_HW_CURSOR: 0x1002,
    IVTP_GET_VIDEO_ENGINE_CONFIGS: 0x1003,
    IVTP_SET_VIDEO_ENGINE_CONFIGS: 0x1004,

    gTxb: 0,
    gTyb: 0,
    gCheck: 0,
    VIRTADD: 0
}

/*var intv = function(i) {
    if (i.toString().length <= 16 || i.toString().indexOf('.') != -1) return i;
    var b = new BigInteger(i.toString());
    return b.intValue();
}*/

var dec = new Decoder();

self.queue = [];

self.debug = "";


self.addEventListener('message', function(e) {
    if (e.data.cmd == 'imageBuffer') {
        //self.imageBuffer = e.data.imageBuffer;
        dec.setImageBuffer(e.data.imageBuffer);

    } else if (e.data.cmd == 'resolution_changed') {
        dec.setImageBuffer(e.data.imageBuffer);
        //render();
    } else {
        self.queue.push({
            buffer: e.data.buffer,
            header: e.data.header
        });
    }

});

function decompress() {
    if (self.queue.length) {
        var data = self.queue.shift();
//        var inbuf = data.buffer;

        dec.decode(data.header, data.buffer);

        self.postMessage({
            cmd: 'draw',
            ibuf: dec.imageBuffer
        });
    }

    setTimeout(decompress, 1);
}

function static_log(str) {
    self.postMessage({
        cmd: 'debug',
        args: str
    });
}

function stack_trace(e) {
    self.postMessage({
        cmd: 'exception',
        ex: e.stack
    });
}

decompress();
